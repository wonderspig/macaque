/**
  题目:
      给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
      如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。
      注意：你不能在买入股票前卖出股票。
      示例 1:
      输入: [7,1,5,3,6,4]
      输出: 5
      解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
           注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
      示例 2:
      输入: [7,6,4,3,1]
      输出: 0
      解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
  思路:
      一次遍历中记录最小值,当前值-之前经历过的最小值即为一次可能的最大利润,更新全局结果

  效果:
    执行用时：4 ms, 在所有 Go 提交中击败了97.13%的用户
    内存消耗：3 MB, 在所有 Go 提交中击败了92.85%的用户
*/



class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int res=0;
        if(prices.size()<2){
            return res;
        }
        int minVal=prices[0];
        //这个实际上是找到前面的最小值，找到后面的最大值
        for(int i=1;i<prices.size();i++){
            res=max(res,prices[i]-minVal);
            minVal=min(minVal,prices[i]);
        }
        return res;
    }
};
